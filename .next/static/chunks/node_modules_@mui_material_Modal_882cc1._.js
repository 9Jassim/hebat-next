(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_@mui_material_Modal_882cc1._.js", {

"[project]/node_modules/@mui/material/Modal/modalClasses.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/@babel/runtime/helpers/interopRequireDefault.js [client] (ecmascript)").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
exports.getModalUtilityClass = getModalUtilityClass;
var _generateUtilityClasses = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/utils/generateUtilityClasses/index.js [client] (ecmascript)"));
var _generateUtilityClass = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/utils/generateUtilityClass/index.js [client] (ecmascript)"));
function getModalUtilityClass(slot) {
    return (0, _generateUtilityClass.default)('MuiModal', slot);
}
const modalClasses = (0, _generateUtilityClasses.default)('MuiModal', [
    'root',
    'hidden',
    'backdrop'
]);
var _default = exports.default = modalClasses;

}.call(this) }),
"[project]/node_modules/@mui/material/Modal/ModalManager.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/@babel/runtime/helpers/interopRequireDefault.js [client] (ecmascript)").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModalManager = void 0;
exports.ariaHidden = ariaHidden;
var _ownerWindow = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/utils/ownerWindow/index.js [client] (ecmascript)"));
var _ownerDocument = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/utils/ownerDocument/index.js [client] (ecmascript)"));
var _getScrollbarSize = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/utils/getScrollbarSize/index.js [client] (ecmascript)"));
// Is a vertical scrollbar displayed?
function isOverflowing(container) {
    const doc = (0, _ownerDocument.default)(container);
    if (doc.body === container) {
        return (0, _ownerWindow.default)(container).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
}
function ariaHidden(element, hide) {
    if (hide) {
        element.setAttribute('aria-hidden', 'true');
    } else {
        element.removeAttribute('aria-hidden');
    }
}
function getPaddingRight(element) {
    return parseInt((0, _ownerWindow.default)(element).getComputedStyle(element).paddingRight, 10) || 0;
}
function isAriaHiddenForbiddenOnElement(element) {
    // The forbidden HTML tags are the ones from ARIA specification that
    // can be children of body and can't have aria-hidden attribute.
    // cf. https://www.w3.org/TR/html-aria/#docconformance
    const forbiddenTagNames = [
        'TEMPLATE',
        'SCRIPT',
        'STYLE',
        'LINK',
        'MAP',
        'META',
        'NOSCRIPT',
        'PICTURE',
        'COL',
        'COLGROUP',
        'PARAM',
        'SLOT',
        'SOURCE',
        'TRACK'
    ];
    const isForbiddenTagName = forbiddenTagNames.includes(element.tagName);
    const isInputHidden = element.tagName === 'INPUT' && element.getAttribute('type') === 'hidden';
    return isForbiddenTagName || isInputHidden;
}
function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, hide) {
    const blacklist = [
        mountElement,
        currentElement,
        ...elementsToExclude
    ];
    [].forEach.call(container.children, (element)=>{
        const isNotExcludedElement = !blacklist.includes(element);
        const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
        if (isNotExcludedElement && isNotForbiddenElement) {
            ariaHidden(element, hide);
        }
    });
}
function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index)=>{
        if (callback(item)) {
            idx = index;
            return true;
        }
        return false;
    });
    return idx;
}
function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
        if (isOverflowing(container)) {
            // Compute the size before applying overflow hidden to avoid any scroll jumps.
            const scrollbarSize = (0, _getScrollbarSize.default)((0, _ownerWindow.default)(container));
            restoreStyle.push({
                value: container.style.paddingRight,
                property: 'padding-right',
                el: container
            });
            // Use computed style, here to get the real padding to add our scrollbar width.
            container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
            // .mui-fixed is a global helper.
            const fixedElements = (0, _ownerDocument.default)(container).querySelectorAll('.mui-fixed');
            [].forEach.call(fixedElements, (element)=>{
                restoreStyle.push({
                    value: element.style.paddingRight,
                    property: 'padding-right',
                    el: element
                });
                element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
            });
        }
        let scrollContainer;
        if (container.parentNode instanceof DocumentFragment) {
            scrollContainer = (0, _ownerDocument.default)(container).body;
        } else {
            // Support html overflow-y: auto for scroll stability between pages
            // https://css-tricks.com/snippets/css/force-vertical-scrollbar/
            const parent = container.parentElement;
            const containerWindow = (0, _ownerWindow.default)(container);
            scrollContainer = parent?.nodeName === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container;
        }
        // Block the scroll even if no scrollbar is visible to account for mobile keyboard
        // screensize shrink.
        restoreStyle.push({
            value: scrollContainer.style.overflow,
            property: 'overflow',
            el: scrollContainer
        }, {
            value: scrollContainer.style.overflowX,
            property: 'overflow-x',
            el: scrollContainer
        }, {
            value: scrollContainer.style.overflowY,
            property: 'overflow-y',
            el: scrollContainer
        });
        scrollContainer.style.overflow = 'hidden';
    }
    const restore = ()=>{
        restoreStyle.forEach((param)=>{
            let { value, el, property } = param;
            if (value) {
                el.style.setProperty(property, value);
            } else {
                el.style.removeProperty(property);
            }
        });
    };
    return restore;
}
function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element)=>{
        if (element.getAttribute('aria-hidden') === 'true') {
            hiddenSiblings.push(element);
        }
    });
    return hiddenSiblings;
}
/**
 * @ignore - do not document.
 *
 * Proper state management for containers and the modals in those containers.
 * Simplified, but inspired by react-overlay's ModalManager class.
 * Used by the Modal to ensure proper styling of containers.
 */ class ModalManager {
    constructor(){
        this.modals = [];
        this.containers = [];
    }
    add(modal, container) {
        let modalIndex = this.modals.indexOf(modal);
        if (modalIndex !== -1) {
            return modalIndex;
        }
        modalIndex = this.modals.length;
        this.modals.push(modal);
        // If the modal we are adding is already in the DOM.
        if (modal.modalRef) {
            ariaHidden(modal.modalRef, false);
        }
        const hiddenSiblings = getHiddenSiblings(container);
        ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
        const containerIndex = findIndexOf(this.containers, (item)=>item.container === container);
        if (containerIndex !== -1) {
            this.containers[containerIndex].modals.push(modal);
            return modalIndex;
        }
        this.containers.push({
            modals: [
                modal
            ],
            container,
            restore: null,
            hiddenSiblings
        });
        return modalIndex;
    }
    mount(modal, props) {
        const containerIndex = findIndexOf(this.containers, (item)=>item.modals.includes(modal));
        const containerInfo = this.containers[containerIndex];
        if (!containerInfo.restore) {
            containerInfo.restore = handleContainer(containerInfo, props);
        }
    }
    remove(modal) {
        let ariaHiddenState = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        const modalIndex = this.modals.indexOf(modal);
        if (modalIndex === -1) {
            return modalIndex;
        }
        const containerIndex = findIndexOf(this.containers, (item)=>item.modals.includes(modal));
        const containerInfo = this.containers[containerIndex];
        containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
        this.modals.splice(modalIndex, 1);
        // If that was the last modal in a container, clean up the container.
        if (containerInfo.modals.length === 0) {
            // The modal might be closed before it had the chance to be mounted in the DOM.
            if (containerInfo.restore) {
                containerInfo.restore();
            }
            if (modal.modalRef) {
                // In case the modal wasn't in the DOM yet.
                ariaHidden(modal.modalRef, ariaHiddenState);
            }
            ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
            this.containers.splice(containerIndex, 1);
        } else {
            // Otherwise make sure the next top modal is visible to a screen reader.
            const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
            // as soon as a modal is adding its modalRef is undefined. it can't set
            // aria-hidden because the dom element doesn't exist either
            // when modal was unmounted before modalRef gets null
            if (nextTop.modalRef) {
                ariaHidden(nextTop.modalRef, false);
            }
        }
        return modalIndex;
    }
    isTopModal(modal) {
        return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
}
exports.ModalManager = ModalManager;

}.call(this) }),
"[project]/node_modules/@mui/material/Modal/useModal.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
'use client';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/@babel/runtime/helpers/interopRequireDefault.js [client] (ecmascript)").default;
var _interopRequireWildcard = __turbopack_require__("[project]/node_modules/@babel/runtime/helpers/interopRequireWildcard.js [client] (ecmascript)").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/next/dist/compiled/react/index.js [client] (ecmascript)"));
var _ownerDocument = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/utils/ownerDocument/index.js [client] (ecmascript)"));
var _useForkRef = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/utils/useForkRef/index.js [client] (ecmascript)"));
var _useEventCallback = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/utils/useEventCallback/index.js [client] (ecmascript)"));
var _createChainedFunction = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/utils/createChainedFunction/index.js [client] (ecmascript)"));
var _extractEventHandlers = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/utils/extractEventHandlers/index.js [client] (ecmascript)"));
var _ModalManager = __turbopack_require__("[project]/node_modules/@mui/material/Modal/ModalManager.js [client] (ecmascript)");
function getContainer(container) {
    return typeof container === 'function' ? container() : container;
}
function getHasTransition(children) {
    return children ? children.props.hasOwnProperty('in') : false;
}
const noop = ()=>{};
// A modal manager used to track and manage the state of open Modals.
// Modals don't open on the server so this won't conflict with concurrent requests.
const manager = new _ModalManager.ModalManager();
function useModal(parameters) {
    const { container, disableEscapeKeyDown = false, disableScrollLock = false, closeAfterTransition = false, onTransitionEnter, onTransitionExited, children, onClose, open, rootRef } = parameters;
    // @ts-ignore internal logic
    const modal = React.useRef({});
    const mountNodeRef = React.useRef(null);
    const modalRef = React.useRef(null);
    const handleRef = (0, _useForkRef.default)(modalRef, rootRef);
    const [exited, setExited] = React.useState(!open);
    const hasTransition = getHasTransition(children);
    let ariaHiddenProp = true;
    if (parameters['aria-hidden'] === 'false' || parameters['aria-hidden'] === false) {
        ariaHiddenProp = false;
    }
    const getDoc = ()=>(0, _ownerDocument.default)(mountNodeRef.current);
    const getModal = ()=>{
        modal.current.modalRef = modalRef.current;
        modal.current.mount = mountNodeRef.current;
        return modal.current;
    };
    const handleMounted = ()=>{
        manager.mount(getModal(), {
            disableScrollLock
        });
        // Fix a bug on Chrome where the scroll isn't initially 0.
        if (modalRef.current) {
            modalRef.current.scrollTop = 0;
        }
    };
    const handleOpen = (0, _useEventCallback.default)(()=>{
        const resolvedContainer = getContainer(container) || getDoc().body;
        manager.add(getModal(), resolvedContainer);
        // The element was already mounted.
        if (modalRef.current) {
            handleMounted();
        }
    });
    const isTopModal = ()=>manager.isTopModal(getModal());
    const handlePortalRef = (0, _useEventCallback.default)((node)=>{
        mountNodeRef.current = node;
        if (!node) {
            return;
        }
        if (open && isTopModal()) {
            handleMounted();
        } else if (modalRef.current) {
            (0, _ModalManager.ariaHidden)(modalRef.current, ariaHiddenProp);
        }
    });
    const handleClose = React.useCallback(()=>{
        manager.remove(getModal(), ariaHiddenProp);
    }, [
        ariaHiddenProp
    ]);
    React.useEffect(()=>{
        return ()=>{
            handleClose();
        };
    }, [
        handleClose
    ]);
    React.useEffect(()=>{
        if (open) {
            handleOpen();
        } else if (!hasTransition || !closeAfterTransition) {
            handleClose();
        }
    }, [
        open,
        handleClose,
        hasTransition,
        closeAfterTransition,
        handleOpen
    ]);
    const createHandleKeyDown = (otherHandlers)=>(event)=>{
            otherHandlers.onKeyDown?.(event);
            // The handler doesn't take event.defaultPrevented into account:
            //
            // event.preventDefault() is meant to stop default behaviors like
            // clicking a checkbox to check it, hitting a button to submit a form,
            // and hitting left arrow to move the cursor in a text input etc.
            // Only special HTML elements have these default behaviors.
            if (event.key !== 'Escape' || event.which === 229 || // Wait until IME is settled.
            !isTopModal()) {
                return;
            }
            if (!disableEscapeKeyDown) {
                // Swallow the event, in case someone is listening for the escape key on the body.
                event.stopPropagation();
                if (onClose) {
                    onClose(event, 'escapeKeyDown');
                }
            }
        };
    const createHandleBackdropClick = (otherHandlers)=>(event)=>{
            otherHandlers.onClick?.(event);
            if (event.target !== event.currentTarget) {
                return;
            }
            if (onClose) {
                onClose(event, 'backdropClick');
            }
        };
    const getRootProps = function() {
        let otherHandlers = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        const propsEventHandlers = (0, _extractEventHandlers.default)(parameters);
        // The custom event handlers shouldn't be spread on the root element
        delete propsEventHandlers.onTransitionEnter;
        delete propsEventHandlers.onTransitionExited;
        const externalEventHandlers = {
            ...propsEventHandlers,
            ...otherHandlers
        };
        return {
            /*
       * Marking an element with the role presentation indicates to assistive technology
       * that this element should be ignored; it exists to support the web application and
       * is not meant for humans to interact with directly.
       * https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-static-element-interactions.md
       */ role: 'presentation',
            ...externalEventHandlers,
            onKeyDown: createHandleKeyDown(externalEventHandlers),
            ref: handleRef
        };
    };
    const getBackdropProps = function() {
        let otherHandlers = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        const externalEventHandlers = otherHandlers;
        return {
            'aria-hidden': true,
            ...externalEventHandlers,
            onClick: createHandleBackdropClick(externalEventHandlers),
            open
        };
    };
    const getTransitionProps = ()=>{
        const handleEnter = ()=>{
            setExited(false);
            if (onTransitionEnter) {
                onTransitionEnter();
            }
        };
        const handleExited = ()=>{
            setExited(true);
            if (onTransitionExited) {
                onTransitionExited();
            }
            if (closeAfterTransition) {
                handleClose();
            }
        };
        return {
            onEnter: (0, _createChainedFunction.default)(handleEnter, children?.props.onEnter ?? noop),
            onExited: (0, _createChainedFunction.default)(handleExited, children?.props.onExited ?? noop)
        };
    };
    return {
        getRootProps,
        getBackdropProps,
        getTransitionProps,
        rootRef: handleRef,
        portalRef: handlePortalRef,
        isTopModal,
        exited,
        hasTransition
    };
}
var _default = exports.default = useModal;

}.call(this) }),
"[project]/node_modules/@mui/material/Modal/Modal.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
"use strict";
'use client';
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/@babel/runtime/helpers/interopRequireDefault.js [client] (ecmascript)").default;
var _interopRequireWildcard = __turbopack_require__("[project]/node_modules/@babel/runtime/helpers/interopRequireWildcard.js [client] (ecmascript)").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/next/dist/compiled/react/index.js [client] (ecmascript)"));
var _propTypes = _interopRequireDefault(__turbopack_require__("[project]/node_modules/prop-types/index.js [client] (ecmascript)"));
var _clsx = _interopRequireDefault(__turbopack_require__("[project]/node_modules/clsx/dist/clsx.js [client] (ecmascript)"));
var _HTMLElementType = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/utils/HTMLElementType/index.js [client] (ecmascript)"));
var _elementAcceptingRef = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/utils/elementAcceptingRef/index.js [client] (ecmascript)"));
var _composeClasses = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/utils/composeClasses/index.js [client] (ecmascript)"));
var _Unstable_TrapFocus = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/material/Unstable_TrapFocus/index.js [client] (ecmascript)"));
var _Portal = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/material/Portal/index.js [client] (ecmascript)"));
var _zeroStyled = __turbopack_require__("[project]/node_modules/@mui/material/zero-styled/index.js [client] (ecmascript)");
var _memoTheme = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/material/utils/memoTheme.js [client] (ecmascript)"));
var _DefaultPropsProvider = __turbopack_require__("[project]/node_modules/@mui/material/DefaultPropsProvider/index.js [client] (ecmascript)");
var _Backdrop = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/material/Backdrop/index.js [client] (ecmascript)"));
var _useModal = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/material/Modal/useModal.js [client] (ecmascript)"));
var _modalClasses = __turbopack_require__("[project]/node_modules/@mui/material/Modal/modalClasses.js [client] (ecmascript)");
var _useSlot = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/material/utils/useSlot.js [client] (ecmascript)"));
var _jsxRuntime = __turbopack_require__("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [client] (ecmascript)");
const useUtilityClasses = (ownerState)=>{
    const { open, exited, classes } = ownerState;
    const slots = {
        root: [
            'root',
            !open && exited && 'hidden'
        ],
        backdrop: [
            'backdrop'
        ]
    };
    return (0, _composeClasses.default)(slots, _modalClasses.getModalUtilityClass, classes);
};
const ModalRoot = (0, _zeroStyled.styled)('div', {
    name: 'MuiModal',
    slot: 'Root',
    overridesResolver: (props, styles)=>{
        const { ownerState } = props;
        return [
            styles.root,
            !ownerState.open && ownerState.exited && styles.hidden
        ];
    }
})((0, _memoTheme.default)((param)=>{
    let { theme } = param;
    return {
        position: 'fixed',
        zIndex: (theme.vars || theme).zIndex.modal,
        right: 0,
        bottom: 0,
        top: 0,
        left: 0,
        variants: [
            {
                props: (param)=>{
                    let { ownerState } = param;
                    return !ownerState.open && ownerState.exited;
                },
                style: {
                    visibility: 'hidden'
                }
            }
        ]
    };
}));
const ModalBackdrop = (0, _zeroStyled.styled)(_Backdrop.default, {
    name: 'MuiModal',
    slot: 'Backdrop'
})({
    zIndex: -1
});
/**
 * Modal is a lower-level construct that is leveraged by the following components:
 *
 * - [Dialog](/material-ui/api/dialog/)
 * - [Drawer](/material-ui/api/drawer/)
 * - [Menu](/material-ui/api/menu/)
 * - [Popover](/material-ui/api/popover/)
 *
 * If you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component
 * rather than directly using Modal.
 *
 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
 */ const Modal = /*#__PURE__*/ React.forwardRef(function Modal(inProps, ref) {
    const props = (0, _DefaultPropsProvider.useDefaultProps)({
        name: 'MuiModal',
        props: inProps
    });
    const { BackdropComponent = ModalBackdrop, BackdropProps, classes: classesProp, className, closeAfterTransition = false, children, container, component, components = {}, componentsProps = {}, disableAutoFocus = false, disableEnforceFocus = false, disableEscapeKeyDown = false, disablePortal = false, disableRestoreFocus = false, disableScrollLock = false, hideBackdrop = false, keepMounted = false, onClose, onTransitionEnter, onTransitionExited, open, slotProps = {}, slots = {}, // eslint-disable-next-line react/prop-types
    theme, ...other } = props;
    const propsWithDefaults = {
        ...props,
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        hideBackdrop,
        keepMounted
    };
    const { getRootProps, getBackdropProps, getTransitionProps, portalRef, isTopModal, exited, hasTransition } = (0, _useModal.default)({
        ...propsWithDefaults,
        rootRef: ref
    });
    const ownerState = {
        ...propsWithDefaults,
        exited
    };
    const classes = useUtilityClasses(ownerState);
    const childProps = {};
    if (children.props.tabIndex === undefined) {
        childProps.tabIndex = '-1';
    }
    // It's a Transition like component
    if (hasTransition) {
        const { onEnter, onExited } = getTransitionProps();
        childProps.onEnter = onEnter;
        childProps.onExited = onExited;
    }
    const externalForwardedProps = {
        slots: {
            root: components.Root,
            backdrop: components.Backdrop,
            ...slots
        },
        slotProps: {
            ...componentsProps,
            ...slotProps
        }
    };
    const [RootSlot, rootProps] = (0, _useSlot.default)('root', {
        ref,
        elementType: ModalRoot,
        externalForwardedProps: {
            ...externalForwardedProps,
            ...other,
            component
        },
        getSlotProps: getRootProps,
        ownerState,
        className: (0, _clsx.default)(className, classes?.root, !ownerState.open && ownerState.exited && classes?.hidden)
    });
    const [BackdropSlot, backdropProps] = (0, _useSlot.default)('backdrop', {
        ref: BackdropProps?.ref,
        elementType: BackdropComponent,
        externalForwardedProps,
        shouldForwardComponentProp: true,
        additionalProps: BackdropProps,
        getSlotProps: (otherHandlers)=>{
            return getBackdropProps({
                ...otherHandlers,
                onClick: (event)=>{
                    if (otherHandlers?.onClick) {
                        otherHandlers.onClick(event);
                    }
                }
            });
        },
        className: (0, _clsx.default)(BackdropProps?.className, classes?.backdrop),
        ownerState
    });
    if (!keepMounted && !open && (!hasTransition || exited)) {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(_Portal.default, {
        ref: portalRef,
        container: container,
        disablePortal: disablePortal,
        children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(RootSlot, {
            ...rootProps,
            children: [
                !hideBackdrop && BackdropComponent ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(BackdropSlot, {
                    ...backdropProps
                }) : null,
                /*#__PURE__*/ (0, _jsxRuntime.jsx)(_Unstable_TrapFocus.default, {
                    disableEnforceFocus: disableEnforceFocus,
                    disableAutoFocus: disableAutoFocus,
                    disableRestoreFocus: disableRestoreFocus,
                    isEnabled: isTopModal,
                    open: open,
                    children: /*#__PURE__*/ React.cloneElement(children, childProps)
                })
            ]
        })
    });
});
("TURBOPACK compile-time truthy", 1) ? Modal.propTypes /* remove-proptypes */  = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   * })({
   *   zIndex: -1,
   * })
   */ BackdropComponent: _propTypes.default.elementType,
    /**
   * Props applied to the [`Backdrop`](https://mui.com/material-ui/api/backdrop/) element.
   * @deprecated Use `slotProps.backdrop` instead.
   */ BackdropProps: _propTypes.default.object,
    /**
   * A single child content element.
   */ children: _elementAcceptingRef.default.isRequired,
    /**
   * Override or extend the styles applied to the component.
   */ classes: _propTypes.default.object,
    /**
   * @ignore
   */ className: _propTypes.default.string,
    /**
   * When set to true the Modal waits until a nested Transition is completed before closing.
   * @default false
   */ closeAfterTransition: _propTypes.default.bool,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypes.default.elementType,
    /**
   * The components used for each slot inside.
   *
   * @deprecated Use the `slots` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */ components: _propTypes.default.shape({
        Backdrop: _propTypes.default.elementType,
        Root: _propTypes.default.elementType
    }),
    /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated Use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */ componentsProps: _propTypes.default.shape({
        backdrop: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.object
        ]),
        root: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.object
        ])
    }),
    /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */ container: _propTypes.default/* @typescript-to-proptypes-ignore */ .oneOfType([
        _HTMLElementType.default,
        _propTypes.default.func
    ]),
    /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */ disableAutoFocus: _propTypes.default.bool,
    /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */ disableEnforceFocus: _propTypes.default.bool,
    /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */ disableEscapeKeyDown: _propTypes.default.bool,
    /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */ disablePortal: _propTypes.default.bool,
    /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden or unmounted.
   * @default false
   */ disableRestoreFocus: _propTypes.default.bool,
    /**
   * Disable the scroll lock behavior.
   * @default false
   */ disableScrollLock: _propTypes.default.bool,
    /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */ hideBackdrop: _propTypes.default.bool,
    /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Modal.
   * @default false
   */ keepMounted: _propTypes.default.bool,
    /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */ onClose: _propTypes.default.func,
    /**
   * A function called when a transition enters.
   */ onTransitionEnter: _propTypes.default.func,
    /**
   * A function called when a transition has exited.
   */ onTransitionExited: _propTypes.default.func,
    /**
   * If `true`, the component is shown.
   */ open: _propTypes.default.bool.isRequired,
    /**
   * The props used for each slot inside the Modal.
   * @default {}
   */ slotProps: _propTypes.default.shape({
        backdrop: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.object
        ]),
        root: _propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.object
        ])
    }),
    /**
   * The components used for each slot inside the Modal.
   * Either a string to use a HTML element or a component.
   * @default {}
   */ slots: _propTypes.default.shape({
        backdrop: _propTypes.default.elementType,
        root: _propTypes.default.elementType
    }),
    /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */ sx: _propTypes.default.oneOfType([
        _propTypes.default.arrayOf(_propTypes.default.oneOfType([
            _propTypes.default.func,
            _propTypes.default.object,
            _propTypes.default.bool
        ])),
        _propTypes.default.func,
        _propTypes.default.object
    ])
} : ("TURBOPACK unreachable", undefined);
var _default = exports.default = Modal;

}.call(this) }),
"[project]/node_modules/@mui/material/Modal/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
var _interopRequireWildcard = __turbopack_require__("[project]/node_modules/@babel/runtime/helpers/interopRequireWildcard.js [client] (ecmascript)").default;
var _interopRequireDefault = __turbopack_require__("[project]/node_modules/@babel/runtime/helpers/interopRequireDefault.js [client] (ecmascript)").default;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _exportNames = {
    ModalManager: true,
    modalClasses: true
};
Object.defineProperty(exports, "ModalManager", {
    enumerable: true,
    get: function() {
        return _ModalManager.ModalManager;
    }
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _Modal.default;
    }
});
Object.defineProperty(exports, "modalClasses", {
    enumerable: true,
    get: function() {
        return _modalClasses.default;
    }
});
var _ModalManager = __turbopack_require__("[project]/node_modules/@mui/material/Modal/ModalManager.js [client] (ecmascript)");
var _Modal = _interopRequireDefault(__turbopack_require__("[project]/node_modules/@mui/material/Modal/Modal.js [client] (ecmascript)"));
var _modalClasses = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/@mui/material/Modal/modalClasses.js [client] (ecmascript)"));
Object.keys(_modalClasses).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _modalClasses[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _modalClasses[key];
        }
    });
});

}.call(this) }),
}]);

//# sourceMappingURL=node_modules_@mui_material_Modal_882cc1._.js.map